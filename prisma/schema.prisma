// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String?
  password        String
  role            Role     @default(USER)
  isEmailVerified Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Token           Token[]
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  priority  Int      @default(0)
  createdAt DateTime @default(now())
}

model ContractInvocation {
  id            Int      @id @default(autoincrement())
  contractId    String
  functionName  String
  args          Json
  createdAt     DateTime @default(now())
}

model ContractState {
  id            Int      @id @default(autoincrement())
  contractId    String
  state         Json
  createdAt     DateTime @default(now())
}

model Ledger {
  id                    Int      @id @default(autoincrement())
  sequence              Int
  successfulTransactionCount Int
  failedTransactionCount Int
  operationCount        Int
  txSetOperationCount   Int
  closedAt              DateTime
  totalCoins            String
  feePool               String
  baseFee               Int
  baseReserve           Int
  maxTxSetSize          Int
  protocolVersion       Int
  ledgerHash            String
  previousLedgerHash    String
  pagingToken           String
  headerXdr             String
}

model TransactionVolume {
  id             Int      @id @default(autoincrement())
  contractId     String
  transactionCount Int
  timestamp      DateTime @default(now())
}

model ErrorRate {
  id             Int      @id @default(autoincrement())
  contractId     String
  errorType      String
  errorCount     Int
  timestamp      DateTime @default(now())
}

model GasUsage {
  id             Int      @id @default(autoincrement())
  contractId     String
  gasUsed        Int
  timestamp      DateTime @default(now())
}

model UniqueUsers {
  id             Int      @id @default(autoincrement())
  contractId     String
  userAddress    String
  timestamp      DateTime @default(now())
}

model ResponseTime {
  id             Int      @id @default(autoincrement())
  contractId     String
  responseTime   Int
  timestamp      DateTime @default(now())
}

model DailyTransactionVolume {
  id             Int      @id @default(autoincrement())
  contractId     String
  transactionCount Int
  date           DateTime @default(now())
}

model DailyErrorRate {
  id             Int      @id @default(autoincrement())
  contractId     String
  errorType      String
  errorCount     Int
  date           DateTime @default(now())
}

model DailyGasUsage {
  id             Int      @id @default(autoincrement())
  contractId     String
  gasUsed        Int
  date           DateTime @default(now())
}

model DailyUniqueUsers {
  id             Int      @id @default(autoincrement())
  contractId     String
  uniqueUsers    Int
  date           DateTime @default(now())
}

model DailyResponseTime {
  id             Int      @id @default(autoincrement())
  contractId     String
  averageResponseTime Int
  date           DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
